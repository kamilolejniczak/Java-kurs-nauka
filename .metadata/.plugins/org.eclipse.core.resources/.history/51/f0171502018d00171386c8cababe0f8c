package app.controller;

import java.net.URL;
import java.util.List;
import java.util.ResourceBundle;
import java.util.stream.Collectors;

import app.model.Pole;
import app.model.Gra;
import app.model.Stan;
import app.model.XY;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

public class StatkiController implements Initializable{
    @FXML
    private GridPane t1;
    @FXML
    private GridPane t2;
    @FXML
    private TextField imie;
    @FXML
    private Label trafiony;
    @FXML
    private Label trafiony_zat;
    @FXML
    void closeAction(ActionEvent event) {
    	System.exit(0);
    }
    String imieG = "";
    @FXML
    void imieAction(ActionEvent event) {
    	imieG = imie.getText();
    }
    Gra game = new Gra();
    Stage stage = null;
    @FXML
    void restartGame() {		//start gry
		game.startGame();
		// czyszczenie pola przeciwnika
		List<Node> buttons = t2.getChildren().stream().filter(b -> b instanceof Button)
				.collect(Collectors.toList());

		for (int y = 0; y < 10; y++) {
			for (int x = 0; x < 10; x++) {
				String xy = "" + x + y;
				Stan stan = game.getPrzeciwnikaMapa().getPole(new XY(x, y)).getStan();
				buttons.stream().filter(b -> ((Button) b).getText().endsWith(xy)).forEach(b -> {
					b.setId(stan.toString());
					b.setDisable(false);
				});
			}
		}

		// czyszczenie moich pól
		List<Node> buttons2 = t1.getChildren().stream().filter(b -> b instanceof Button)
				.collect(Collectors.toList());

		for (int y = 0; y < 10; y++) {
			for (int x = 0; x < 10; x++) {
				String xy = "" + x + y;
				Stan stan = game.getMojaMapa().getPole(new XY(x, y)).getStan();
				buttons2.stream().filter(b -> ((Button) b).getText().endsWith(xy))
						.forEach(b -> b.setId(stan.toString()));
			}
		}
    }
		@FXML
		private void showGameInfo() {
			if (stage == null) {
				stage = (Stage) t2.getScene().getWindow();
			}

	}
		@FXML
		private void pushAction(ActionEvent e) {
			Button button = (Button) e.getSource();
			Integer number = Integer.parseInt (button.getText());
			int x = number;
			int y = number;
			
			Pole[] pola = game.nextRound(new XY(x, y));
			setPrzeciwnikaPole(pola[0]);
			setMojePole(pola[1]);

	}
		private void setMojePole(Pole pole) {
			if (pole.getStan() == Stan.TRAFIENIE) {
				int punkty = game.getPrzeciwnik().getPunkty();
				if (punkty == 9) {
					showWynik("Przegra³eœ!");
				}
			}

			XY xy = pole.getXY();
			int x = xy.getX();
			int y = xy.getY();
			String buttonNr = "" + x + y;
			String stan = pole.getStan().toString();

			ObservableList<Node> buttons = t1.getChildren();
			buttons.stream().filter(b -> b instanceof Button).filter(b -> ((Button) b).getText().endsWith(buttonNr))
					.forEach(b -> b.setId(stan));
		}

		// set enemy's field which was hit by me
		private void setPrzeciwnikaPole(Pole pole) {
			if (pole.getStan() == Stan.TRAFIENIEPRZECIWNIKA) {
				int punkty = game.getJa().getPunkty();
				if (punkty == 9) {
					showWynik("Wygra³eœ!");
				}
			}

			XY xy = pole.getXY();
			int x = xy.getX();
			int y = xy.getY();
			String buttonNr = "" + x + y;
			String stan = pole.getStan().toString();

			ObservableList<Node> buttons = t2.getChildren();
			buttons.stream().filter(b -> b instanceof Button).filter(b -> ((Button) b).getText().endsWith(buttonNr))
					.forEach(b -> {
						b.setId(stan);
						b.setDisable(true);
					});
		}

		private void showWynik(String message) {
			if (stage == null) {
				stage = (Stage) t2.getScene().getWindow();
			}

			List<Node> buttons = t2.getChildren().stream().filter(b -> b instanceof Button)
					.collect(Collectors.toList());

			for (int y = 0; y <= 10; y++) {
				for (int x = 0; x <= 10; x++) {
					String xy = "" + x + y;
					buttons.stream()
					.filter(b -> ((Button) b).getText().endsWith(xy))
					.forEach(b -> b.setDisable(true));
				}
			}
		}
		@Override
		public void initialize(URL arg0, ResourceBundle arg1) {
			
		}
		public StatkiController() {}
		public StatkiController(GridPane t1, GridPane t2, TextField imie, Label trafiony, Label trafiony_zat,
				String imieG, Gra game, Stage stage) {
			super();
			this.t1 = t1;
			this.t2 = t2;
			this.imie = imie;
			this.trafiony = trafiony;
			this.trafiony_zat = trafiony_zat;
			this.imieG = imieG;
			this.game = game;
			this.stage = stage;
		}
		
		
}
	

